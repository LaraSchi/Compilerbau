[
    {
        "no"        : "1"
    ,   "name"      : "IfElse"
    ,   "input"     : "class ControlClass {public int check(int a) {if (a > 0) {return 1;} else {return 0;}}}"
    ,   "expected"  : "Program (Class (NewType \"ControlClass\") [] [MethodDecl Public IntT \"check\" [Parameter IntT \"a\"] [IfElseStmt (BinOpExpr (LocalOrFieldVarExpr \"a\") Greater (IntLitExpr 0)) (Block [ReturnStmt (IntLitExpr 1)]) (Just (Block [ReturnStmt (IntLitExpr 0)]))])]) False"
    },{
        "no"        : "2"
    ,   "name"      : "Class"
    ,   "input"     : "class SimpleClass {int number;boolean flag;}"
    ,   "expected"  : "Program (Class (NewType 'SimpleClass') [FieldDecl IntT 'number' Nothing,FieldDecl BoolT 'flag' Nothing] []) False"
    },{
        "no"        : "3"
    ,   "name"      : "Method"
    ,   "input"     : "class MathClass {public int add(int a, int b) {return a + b;}}"
    ,   "expected"  : "Program (Class (NewType 'MathClass') [] [MethodDecl Public IntT 'add' [Parameter IntT 'a',Parameter IntT 'b'] (Block [ReturnStmt (BinOpExpr (LocalOrFieldVarExpr 'a') Plus (LocalOrFieldVarExpr 'b'))])]) False"
    },{
        "no"        : "4"
    ,   "name"      : "While"
    ,   "input"     : "class LoopClass {public int countToTen() {int i; i = 0; while (i < 10) {i = i + 1;}return i;}}"
    ,   "expected"  : "Program (Class (NewType \"LoopClass\") [] [MethodDecl Public IntT \"countToTen\" [] (Block [LocalVarDeclStmt IntT \"i\" Nothing,StmtExprStmt (AssignmentStmt (LocalOrFieldVarExpr \"i\") (IntLitExpr 0)),WhileStmt (BinOpExpr (LocalOrFieldVarExpr \"i\") Less (IntLitExpr 10)) (Block [StmtExprStmt (AssignmentStmt (LocalOrFieldVarExpr \"i\") (BinOpExpr (LocalOrFieldVarExpr \"i\") Plus (IntLitExpr 1)))]),ReturnStmt (LocalOrFieldVarExpr \"i\")])]) False"
    },{
        "no"        : "5"
    ,   "name"      : "Var And Calc"
    ,   "input"     : "class CalculationClass {public int calculate() {int a; a = 10;int b; b = a + 5;return b;}}"
    ,   "expected"  : "Program (Class (NewType \"CalculationClass\") [] [MethodDecl Public IntT \"calculate\" [] (Block [LocalVarDeclStmt IntT \"a\" Nothing,StmtExprStmt (AssignmentStmt (LocalOrFieldVarExpr \"a\") (IntLitExpr 10)),LocalVarDeclStmt IntT \"b\" Nothing,StmtExprStmt (AssignmentStmt (LocalOrFieldVarExpr \"b\") (BinOpExpr (LocalOrFieldVarExpr \"a\") Plus (IntLitExpr 5))),ReturnStmt (LocalOrFieldVarExpr \"b\")])]) False"
    }
]